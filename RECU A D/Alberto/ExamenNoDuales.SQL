CREATE TABLE CLIENTE (
	id INT GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
	dni VARCHAR(9),
	nombre VARCHAR(50) NOT NULL,
	email VARCHAR(50),
	usuario VARCHAR(50) NOT NULL,
	clave VARCHAR(255) NOT NULL,
	CONSTRAINT UK_CLIENTE_DNI UNIQUE (dni),
	CONSTRAINT UK_CLIENTE_USUARIO UNIQUE (usuario)
);
CREATE TABLE puntos_entrega(
	id INT GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
	nombrePunto VARCHAR(100) NOT NULL,
	localizacion VARCHAR(100) NOT NULL,
	CONSTRAINT UK_puntos_entrega_localizacion UNIQUE (localizacion)
);

CREATE TABLE VENTA (
	id INT GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
	id_cliente INT,
	id_punto_entrega INT,
	envio VARCHAR(200),
	facturacion VARCHAR(200) NOT NULL,
	fecha DATE,
	metodo VARCHAR(200) NOT NULL,
	num_tarjeta VARCHAR(12),
	gastos_envio VARCHAR(100),
	CONSTRAINT FK_VENTA_ID_CLIENTE FOREIGN KEY (id_cliente) REFERENCES CLIENTE (id),
	CONSTRAINT FK_VENTA_ID_punto_entrega UNIQUE (id_punto_entrega), -- Cambio de nombre de la restricción
	CONSTRAINT CK_VENTA_METODO CHECK (metodo IN ('efectivo', 'online', 'online-premium', 'Otro'))
);
CREATE TABLE horarios_apertura(
	id INT GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
	id_punto_entrega INT,
	dia_semana VARCHAR(30) NOT NULL,
	hora_apertura DATE NOT NULL,
	hora_salida DATE NOT NULL,
	dia_festivo VARCHAR(30) NOT NULL,
	CONSTRAINT FK_horarios_apertura_id_punto_entrega FOREIGN KEY (id_punto_entrega) REFERENCES puntos_entrega (id)
);
CREATE TABLE estado_envio (
	id INT GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
	estado VARCHAR(20) NOT NULL,
	idVenta int,
	CONSTRAINT FK_estado_envio_idVenta FOREIGN KEY (idVenta) REFERENCES VENTA (id)
);
ALTER TABLE estado_envio
ADD fecha_recogida DATE;


--EJERCICIO 1
CREATE OR REPLACE PROCEDURE insertPuntoEntrega (v_nombrePunto VARCHAR2, v_localizacion VARCHAR2) 
IS
    numero NUMBER(1);
    numero2 NUMBER(1);
    tabla_no_existente EXCEPTION;
    ya_existe EXCEPTION;
    nombrePuntoVacio EXCEPTION;
    localizacionVacia EXCEPTION;
    existenAmbos EXCEPTION;
    ambosVacios EXCEPTION;
	
BEGIN
    -- Verificar si la tabla puntos_entrega existe
	SELECT COUNT(*) INTO numero FROM user_tables WHERE table_name = 'PUNTOS_ENTREGA';
		IF numero = 0 THEN
				RAISE tabla_no_existente;
		END IF;

	-- Verificar si ya existe una entrada con la misma localización
	SELECT COUNT(*) INTO numero2 FROM PUNTOS_ENTREGA WHERE localizacion = v_localizacion;
		IF numero2 = 1 THEN
				RAISE ya_existe;
		END IF;

		-- Verificar si tanto el nombre como la localización están vacíos
		IF (v_nombrePunto IS NULL OR v_nombrePunto = '') AND (v_localizacion IS NULL OR v_localizacion = '') THEN
				RAISE ambosVacios;
		END IF;

		-- Verificar si el nombre del punto está vacío
		IF v_nombrePunto IS NULL OR v_nombrePunto = '' THEN
				RAISE nombrePuntoVacio;
		END IF;

		-- Verificar si la localización está vacía
		IF v_localizacion IS NULL OR v_localizacion = '' THEN
				RAISE localizacionVacia;
		END IF;

		-- Insertar el nuevo punto de entrega
		INSERT INTO puntos_entrega (nombrePunto, localizacion) VALUES (v_nombrePunto, v_localizacion);
		DBMS_OUTPUT.PUT_LINE('Punto de entrega entregado correctamente');

EXCEPTION
    WHEN tabla_no_existente THEN
        DBMS_OUTPUT.PUT_LINE('La tabla puntos_entrega no existe.');
	WHEN ya_existe THEN
			DBMS_OUTPUT.PUT_LINE('Ya existe un punto de entrega con la misma localización.');
	WHEN nombrePuntoVacio THEN
			DBMS_OUTPUT.PUT_LINE('El nombre del punto de entrega no puede estar vacío.');
	WHEN localizacionVacia THEN
			DBMS_OUTPUT.PUT_LINE('La localización del punto de entrega no puede estar vacía.');
	WHEN existenAmbos THEN
			DBMS_OUTPUT.PUT_LINE('El nombre y la localización ya existen.');
	WHEN ambosVacios THEN
			DBMS_OUTPUT.PUT_LINE('Tanto el nombre como la localización están vacíos.');
	WHEN OTHERS THEN
			DBMS_OUTPUT.PUT_LINE('Error al insertar el punto de entrega.');
END;
/

DECLARE
	nombrePunto VARCHAR2(100) := 'asdf'; -- Cambia por el nombre del punto
    localizacion VARCHAR2(100) := 'asdf'; -- Cambia por la localización del punto
BEGIN
    insertPuntoEntrega(nombrePunto, localizacion);
EXCEPTION
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error al ejecutar el procedimiento insertPuntoEntrega.');
END;
/

--EJERCICIO 2
alter session set "_ORACLE_SCRIPT"=true;

CREATE TABLE puntos_entrega_temporal(
	id INT GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY, --Definida como clave primaria, y el resto es un ENUM (autonumerico)
	nombrePunto VARCHAR(100) NOT NULL,
	localizacion VARCHAR(100) NOT NULL,
	CONSTRAINT UK_puntos_entrega_temporal_localizacion UNIQUE (localizacion) --Hace que la localizacion sea unica
	--Y el uk es el nombre de la restriccion
);

CREATE OR REPLACE TRIGGER control_borrado_punto_entrega
BEFORE DELETE ON puntos_entrega
FOR EACH ROW
DECLARE
	no_hay_registros EXCEPTION;
	v_estado VARCHAR(50);
	productos_siendo_entregados EXCEPTION;
BEGIN
	SELECT es.estado INTO v_estado
	FROM estado_envio es
			 INNER JOIN venta v ON es.idVenta = v.id
	WHERE v.id_punto_entrega = :OLD.id;

	IF v_estado != 'En tránsito' THEN
			RAISE productos_siendo_entregados;
	END IF;
	IF v_estado IS NULL THEN
			RAISE no_hay_registros;
	END IF;
	
	INSERT INTO puntos_entrega_temporal (nombrePunto, localizacion)
	VALUES (:OLD.nombrePunto, :OLD.localizacion);

EXCEPTION
    WHEN no_hay_registros THEN
        DBMS_OUTPUT.PUT_LINE('No se encontraron registros en la tabla estado_envio para el punto de entrega que se está intentando borrar.');

    -- Manejar la excepción si hay productos siendo entregados
	WHEN productos_siendo_entregados THEN
        DBMS_OUTPUT.PUT_LINE('No se puede borrar el punto de entrega porque hay productos siendo entregados.');

    -- Manejar otras excepciones
	WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error en el trigger control_borrado_punto_entrega. El borrado no se realizó.');
END;
/


--Tercer ejercicio
CREATE OR REPLACE FUNCTION revisar_envios_pendientes(v_id_punto_entrega INT) RETURN VARCHAR2 IS
    -- Definir excepciones personalizadas
    ex_punto_no_existe EXCEPTION;
    ex_no_envios_pendientes EXCEPTION;
    ex_campo_vacio EXCEPTION;
    ex_error_calculo_diferencia EXCEPTION;
v_count number;

    -- Variables locales
    v_mensaje VARCHAR2(1000); -- Variable para almacenar el mensaje final
    v_diferencia_dias NUMBER; -- Variable para almacenar la diferencia de días entre la fecha actual y la fecha del envío
BEGIN
    -- Manejar la excepción si el punto de entrega no existe
	BEGIN
	SELECT COUNT(*)
	INTO v_count
	FROM puntos_entrega
	WHERE id = v_id_punto_entrega;

	IF v_count = 0 THEN
            RAISE ex_punto_no_existe;
	END IF;
EXCEPTION
        WHEN NO_DATA_FOUND THEN
        RAISE ex_punto_no_existe;
WHEN ex_punto_no_existe THEN
        RAISE_APPLICATION_ERROR(-20001, 'El punto de entrega especificado no existe.');
END;

    -- Manejar la excepción si no se encuentra ningún envío en tránsito para el punto de entrega dado
BEGIN
	SELECT COUNT(*)
	INTO v_count
	FROM venta v
			 INNER JOIN estado_envio es ON v.id = es.idVenta
	WHERE v.id_punto_entrega = v_id_punto_entrega
	AND es.estado = 'En tránsito';

	IF v_count = 0 THEN
				RAISE ex_no_envios_pendientes;
	END IF;
EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE ex_no_envios_pendientes;
WHEN ex_no_envios_pendientes THEN
        RAISE_APPLICATION_ERROR(-20002, 'No hay envíos pendientes de ser recogidos para el punto de entrega especificado.');
END;

    -- Iterar sobre los envíos pendientes para el punto de entrega dado
	FOR envio IN (
			SELECT v.id AS id_venta,
				   v.envio,
				   v.fecha,
				   v.id_cliente,
				   c.nombre AS nombre_cliente,
				   c.email AS email_cliente,
				   es.estado
			FROM venta v
			INNER JOIN cliente c ON v.id_cliente = c.id
			INNER JOIN estado_envio es ON v.id = es.idVenta
			WHERE v.id_punto_entrega = v_id_punto_entrega
			  AND es.estado = 'En tránsito'
		) LOOP
			-- Manejar la excepción si el campo 'envio' está vacío
			IF envio.envio IS NULL OR envio.envio = '' THEN
				RAISE ex_campo_vacio;
	END IF;

			-- Manejar la excepción si el campo 'fecha' está vacío
			IF envio.fecha IS NULL THEN
				RAISE ex_campo_vacio;
	END IF;

			-- Manejar la excepción si el campo 'id_cliente' está vacío
			IF envio.id_cliente IS NULL THEN
				RAISE ex_campo_vacio;
	END IF;

			-- Manejar la excepción si el campo 'nombre_cliente' está vacío
			IF envio.nombre_cliente IS NULL OR envio.nombre_cliente = '' THEN
				RAISE ex_campo_vacio;
	END IF;

			-- Manejar la excepción si el campo 'email_cliente' está vacío
			IF envio.email_cliente IS NULL OR envio.email_cliente = '' THEN
				RAISE ex_campo_vacio;
	END IF;

			-- Manejar la excepción si el campo 'estado' está vacío
			IF envio.estado IS NULL OR envio.estado = '' THEN
				RAISE ex_campo_vacio;
	END IF;

        -- Calcular la diferencia de días entre la fecha actual y la fecha del envío
BEGIN
            v_diferencia_dias := TRUNC(SYSDATE) - TRUNC(envio.fecha);
EXCEPTION
            WHEN OTHERS THEN
                RAISE ex_error_calculo_diferencia;
END;

        -- Comprobar si es necesario realizar contacto con el cliente
    IF v_diferencia_dias IS NOT NULL THEN
    IF v_diferencia_dias = 4 OR v_diferencia_dias = 1 THEN
        -- Concatenar el mensaje con los datos del envío y del cliente
        v_mensaje := v_mensaje || 'Envío pendiente:';
        v_mensaje := v_mensaje || ' Código de envío: ' || envio.id_venta || ',';
        v_mensaje := v_mensaje || ' Cliente: ' || envio.nombre_cliente || ',';
        v_mensaje := v_mensaje || ' Email: ' || envio.email_cliente || ',';
        v_mensaje := v_mensaje || ' Fecha del envío: ' || TO_CHAR(envio.fecha, 'DD/MM/YYYY') || ',';
        v_mensaje := v_mensaje || ' Estado: ' || envio.estado || ',';
        v_mensaje := v_mensaje || ' Días restantes para recoger: ' || v_diferencia_dias || '.';
        v_mensaje := v_mensaje || CHR(10); -- Agregar salto de línea
	ELSE
        -- Concatenar el mensaje indicando que no hay acción necesaria
        v_mensaje := v_mensaje || 'No se requiere acción para este envío.';
        v_mensaje := v_mensaje || CHR(10); -- Agregar salto de línea
	END IF;
	END IF;
	END LOOP;

    -- Devolver el mensaje
	RETURN v_mensaje;

EXCEPTION
    -- Manejar excepciones específicas
    WHEN ex_punto_no_existe THEN
        RETURN 'El punto de entrega especificado no existe.';
	WHEN ex_no_envios_pendientes THEN
			RETURN 'No hay envíos pendientes de ser recogidos para el punto de entrega especificado.';
	WHEN ex_campo_vacio THEN
			RETURN 'Uno o más campos están vacíos para los envíos pendientes.';
	WHEN ex_error_calculo_diferencia THEN
			RETURN 'Error al calcular la diferencia de días.';
	WHEN OTHERS THEN
			RETURN 'Error inesperado al revisar envíos pendientes.';
END;
/

DECLARE
	v_resultado VARCHAR2(1000);
BEGIN
    -- Llamar a la función y almacenar el resultado en una variable
    v_resultado := revisar_envios_pendientes(1); -- Suponiendo que el ID del punto de entrega es 1

    -- Imprimir el resultado
    DBMS_OUTPUT.PUT_LINE(v_resultado);
END;
/
