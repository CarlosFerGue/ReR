--Errores
show errors para enseñar errores

--Como conectar sin TRIGGERS
1.Buscas Iniciar_Oracle en el buscador y lo ejecutas dandole al intro cuando se seleccione
2.Abres el SQL Plus
3.En el usuario pones: Sys as sysdba
4.En la contraseña le das a intro (no tiene)
Ya debería, y si da algun error se reinicia y ya

--Creamos tablas
CREATE TABLE obra (
id CHAR(5),
titulo VARCHAR(100),
anyo INTEGER,
CONSTRAINT PK_obra PRIMARY KEY (id),
CONSTRAINT NN_titulo CHECK (titulo IS NOT NULL)
);

CREATE TABLE autor (
id CHAR(4),
nombre VARCHAR(30),
apellidos VARCHAR(60),
nacimiento DATE,
CONSTRAINT PK_autor PRIMARY KEY (id),
CONSTRAINT NN_nombre CHECK (nombre IS NOT NULL),
CONSTRAINT NN_apellidos CHECK (apellidos IS NOT NULL)
);

CREATE TABLE autor_obra (
id_autor CHAR(4),
id_obra CHAR(5),
CONSTRAINT PK_autor_obra PRIMARY KEY (id_autor, id_obra),
CONSTRAINT FK_autor_obra_id_autor FOREIGN KEY (id_autor) REFERENCES
autor(id),
CONSTRAINT FK_autor_obra_id_obra FOREIGN KEY (id_obra)
REFERENCES obra(id)
);

CREATE TABLE edicion (
id CHAR(6),
id_obra CHAR(5),
isbn VARCHAR(20),
anyo INTEGER,
CONSTRAINT PK_edicion PRIMARY KEY (id),
CONSTRAINT NN_id_obra CHECK (id_obra IS NOT NULL),
CONSTRAINT NN_isbn CHECK (isbn IS NOT NULL),
CONSTRAINT FK_edicion FOREIGN KEY (id_obra) REFERENCES
obra(id)
);

CREATE TABLE ejemplar (
id_edicion CHAR(6),
numero INTEGER,
alta DATE,
baja DATE,
CONSTRAINT PK_ejemplar PRIMARY KEY (id_edicion, numero),
CONSTRAINT FK_ejemplar FOREIGN KEY (id_edicion) REFERENCES
edicion(id),
CONSTRAINT NN_alta CHECK (alta IS NOT NULL)
);

INSERT INTO autor (id, nombre, apellidos, nacimiento) VALUES ('A001', 'Gabriel', 'García Márquez', TO_DATE('1927-03-06', 'YYYY-MM-DD'));
INSERT INTO autor (id, nombre, apellidos, nacimiento) VALUES ('A002', 'J.K.', 'Rowling', TO_DATE('1965-07-31', 'YYYY-MM-DD'));
INSERT INTO autor (id, nombre, apellidos, nacimiento) VALUES ('A003', 'Fyodor', 'Dostoevsky', TO_DATE('1821-11-11', 'YYYY-MM-DD'));
INSERT INTO autor (id, nombre, apellidos, nacimiento) VALUES ('A004', 'Jane', 'Austen', TO_DATE('1775-12-16', 'YYYY-MM-DD'));
INSERT INTO autor (id, nombre, apellidos, nacimiento) VALUES ('A005', 'Mark', 'Twain', TO_DATE('1835-11-30', 'YYYY-MM-DD'));
INSERT INTO autor (id, nombre, apellidos, nacimiento) VALUES ('A006', 'Leo', 'Tolstoy', TO_DATE('1828-09-09', 'YYYY-MM-DD'));


INSERT INTO obra (id, titulo, anyo) VALUES ('O001', 'Cien años de soledad', 1967);
INSERT INTO obra (id, titulo, anyo) VALUES ('O002', 'Harry Potter y la piedra filosofal', 1997);
INSERT INTO obra (id, titulo, anyo) VALUES ('O003', 'Crimen y castigo', 1866);
INSERT INTO obra (id, titulo, anyo) VALUES ('O004', 'Orgullo y prejuicio', 1813);
INSERT INTO obra (id, titulo, anyo) VALUES ('O005', 'Las aventuras de Tom Sawyer', 1876);
INSERT INTO obra (id, titulo, anyo) VALUES ('O006', 'Guerra y paz', 1869);


INSERT INTO autor_obra (id_autor, id_obra) VALUES ('A001', 'O001');
INSERT INTO autor_obra (id_autor, id_obra) VALUES ('A002', 'O002');
INSERT INTO autor_obra (id_autor, id_obra) VALUES ('A003', 'O003');
INSERT INTO autor_obra (id_autor, id_obra) VALUES ('A004', 'O004');
INSERT INTO autor_obra (id_autor, id_obra) VALUES ('A005', 'O005');
INSERT INTO autor_obra (id_autor, id_obra) VALUES ('A006', 'O006');
-- Repetir un autor con una obra diferente
INSERT INTO autor_obra (id_autor, id_obra) VALUES ('A001', 'O006');
-- Repetir un autor con otra obra diferente
INSERT INTO autor_obra (id_autor, id_obra) VALUES ('A002', 'O003');


INSERT INTO edicion (id, id_obra, isbn, anyo) VALUES ('E001', 'O001', '978-3-16-148410-0', 1967);
INSERT INTO edicion (id, id_obra, isbn, anyo) VALUES ('E002', 'O002', '978-1-26-148410-0', 1997);
INSERT INTO edicion (id, id_obra, isbn, anyo) VALUES ('E003', 'O003', '978-2-16-148410-0', 1866);
INSERT INTO edicion (id, id_obra, isbn, anyo) VALUES ('E004', 'O004', '978-4-16-148410-0', 1813);
INSERT INTO edicion (id, id_obra, isbn, anyo) VALUES ('E005', 'O005', '978-5-16-148410-0', 1876);
INSERT INTO edicion (id, id_obra, isbn, anyo) VALUES ('E006', 'O006', '978-6-16-148410-0', 1869);


INSERT INTO ejemplar (id_edicion, numero, alta) VALUES ('E001', 1, TO_DATE('2000-01-01', 'YYYY-MM-DD'));
INSERT INTO ejemplar (id_edicion, numero, alta) VALUES ('E002', 1, TO_DATE('2000-01-02', 'YYYY-MM-DD'));
INSERT INTO ejemplar (id_edicion, numero, alta) VALUES ('E003', 1, TO_DATE('2000-01-03', 'YYYY-MM-DD'));
INSERT INTO ejemplar (id_edicion, numero, alta) VALUES ('E004', 1, TO_DATE('2000-01-04', 'YYYY-MM-DD'));
INSERT INTO ejemplar (id_edicion, numero, alta) VALUES ('E005', 1, TO_DATE('2000-01-05', 'YYYY-MM-DD'));
INSERT INTO ejemplar (id_edicion, numero, alta) VALUES ('E006', 1, TO_DATE('2000-01-06', 'YYYY-MM-DD'));
INSERT INTO ejemplar (id_edicion, numero, alta) VALUES ('E001', 2, TO_DATE('2001-02-01', 'YYYY-MM-DD'));
INSERT INTO ejemplar (id_edicion, numero, alta) VALUES ('E002', 2, TO_DATE('2001-02-02', 'YYYY-MM-DD'));







--Tablas del examen

-- tabla socio
CREATE TABLE socio(
    ID_SOCIO CHAR(5),
    NOMBRE VARCHAR(30),
    APELLIDOS VARCHAR(100),
    CONSTRAINT PK_IS_SOCIO PRIMARY KEY(ID_SOCIO)
);


-- tabla prestamo
CREATE TABLE prestamo(
    ID_PRESTAMO CHAR(5),
    ID_SOCIO CHAR(5),
    ID_EDICION CHAR(6),
    NUMERO INTEGER,
    INICIO DATE,
    FIN DATE,
    CONSTRAINT PK_ID_PRESTAMO PRIMARY KEY(ID_PRESTAMO),
    CONSTRAINT FK_ID_SOCIO FOREIGN KEY(ID_SOCIO) REFERENCES socio(ID_SOCIO),
    CONSTRAINT FK_ID_EDICION_NUMERO FOREIGN KEY(ID_EDICION, NUMERO) REFERENCES EJEMPLAR(ID_EDICION, NUMERO)
);


--Dar alta socios
-------------------------VERSION FUNCTION------------------------------------------------------

CREATE OR REPLACE FUNCTION darAltaSocio(p_nombre VARCHAR, p_apellidos VARCHAR)
RETURN VARCHAR AS
    v_codigoSalida CHAR(5); --Variable que indica el codigo que sale por pantalla
    id5 CHAR(5);
    v_idRepetida CHAR(5);
    v_letras VARCHAR(100); -- Variable para verificar si solo hay letras en el nombre y apellidos
BEGIN
    -- Verificar si el nombre contiene solo letras
    IF REGEXP_LIKE(p_nombre, '^[[:alpha:]]+$') THEN
        -- Verificar si los apellidos contienen solo letras
        IF REGEXP_LIKE(p_apellidos, '^[[:alpha:]]+$') THEN
    
	
            id5 := dbms_random.string('X', 5);
            SELECT id_socio INTO v_idRepetida FROM socio WHERE id_socio = id5;
                
            WHILE v_idRepetida IS NOT NULL LOOP
                id5 := dbms_random.string('X', 5);
                SELECT id_socio INTO v_idRepetida FROM socio WHERE id_socio = id5;
            END LOOP;
			
			
        ELSE
            RETURN 'Error: Los apellidos deben contener solo letras';
        END IF;
    ELSE
        RETURN 'Error: El nombre debe contener solo letras';
    END IF;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
        	INSERT INTO socio (ID_SOCIO, NOMBRE, APELLIDOS) 
            VALUES (id5, p_nombre, p_apellidos);
            v_codigoSalida := id5;
            COMMIT;
            RETURN 'Se inserto correctamente ' || id5;

        WHEN OTHERS THEN
            RETURN 'Error: Ocurrió una excepción no controlada';
END;
/

DECLARE
    resultado VARCHAR(100);
BEGIN
    resultado := darAltaSocio('Jas','Pep');
    DBMS_OUTPUT.PUT_LINE(resultado);
END;
/

-------------------------VERSION PROCEDURE------------------------------------------------------

CREATE OR REPLACE PROCEDURE darAltaSocioProcedure(p_nombre VARCHAR, p_apellidos VARCHAR)
AS
    v_codigoSalida CHAR(5); --Variable que indica el codigo que sale por pantalla
    id5 CHAR(5);
    v_idRepetida CHAR(5);
    v_letras VARCHAR(100); -- Variable para verificar si solo hay letras en el nombre y apellidos
BEGIN
    -- Verificar si el nombre contiene solo letras
    IF REGEXP_LIKE(p_nombre, '^[[:alpha:]]+$') THEN
        -- Verificar si los apellidos contienen solo letras
        IF REGEXP_LIKE(p_apellidos, '^[[:alpha:]]+$') THEN
    
            id5 := dbms_random.string('X', 5);
            SELECT id_socio INTO v_idRepetida FROM socio WHERE id_socio = id5;
                
            WHILE v_idRepetida IS NOT NULL LOOP
                id5 := dbms_random.string('X', 5);
                SELECT id_socio INTO v_idRepetida FROM socio WHERE id_socio = id5;
            END LOOP;
        ELSE
            DBMS_OUTPUT.PUT_LINE('Error: Los apellidos deben contener solo letras');
        END IF;
    ELSE
        DBMS_OUTPUT.PUT_LINE('Error: El nombre debe contener solo letras');
    END IF;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
        	INSERT INTO socio (ID_SOCIO, NOMBRE, APELLIDOS) 
            VALUES (id5, p_nombre, p_apellidos);
            v_codigoSalida := id5;
            COMMIT;
           DBMS_OUTPUT.PUT_LINE('Se inserto correctamente ' || id5);

        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error: Ocurrió una excepción no controlada');
END;
/


BEGIN
   darAltaSocioProcedure('Jas','Pep');
END;
/


--Dar alta prestamos
-------------------------VERSION FUNCTION------------------------------------------------------
--Pilla bien la id del socio


CREATE OR REPLACE FUNCTION darAltaPrestamo(p_id_socio VARCHAR, p_id_edicion VARCHAR)
RETURN VARCHAR AS
    id5 CHAR(5);
    v_idRepetida CHAR(5);
	v_numeroMasAlto INTEGER;
BEGIN
	SELECT MAX(numero) INTO v_numeroMasAlto FROM ejemplar WHERE id_edicion = p_id_edicion;

    id5 := dbms_random.string('X', 5);
	SELECT id_prestamo INTO v_idRepetida FROM prestamo WHERE id_prestamo = id5;

	WHILE v_idRepetida IS NOT NULL LOOP
            id5 := dbms_random.string('X', 5);
		SELECT id_prestamo INTO v_idRepetida FROM prestamo WHERE id_prestamo = id5;
	END LOOP;

EXCEPTION
	WHEN NO_DATA_FOUND THEN
		--Aqui como no encuentra un id repetida en el WHILE nos tira a esta excepcion
    	INSERT INTO prestamo (id_prestamo, id_socio, id_edicion, numero, inicio)
    	VALUES (id5, p_id_socio, p_id_edicion, v_numeroMasAlto, SYSDATE);
		RETURN 'Tuvo exito';
	WHEN OTHERS THEN
        RETURN 'Error: Ocurrio una excepcion desconocida';
END;
/
    
DECLARE
    resultado VARCHAR(100);
BEGIN
    resultado := darAltaPrestamo('EX1O6','E001');
    DBMS_OUTPUT.PUT_LINE(resultado);
END;
/

select * from prestamo;


-------------------------VERSION PROCEDURE------------------------------------------------------
